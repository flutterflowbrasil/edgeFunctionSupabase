import "jsr:@supabase/functions-js/edge-runtime.d.ts";
Deno.serve(async (req)=>{
  // Configurar cabeçalhos CORS
  const headers = {
    "Content-Type": "application/json",
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "POST",
    "Access-Control-Allow-Headers": "Content-Type"
  };
  // Verificar método HTTP
  if (req.method !== "POST") {
    return new Response(JSON.stringify({
      error: "Método não permitido"
    }), {
      status: 405,
      headers
    });
  }
  try {
    // Obter e validar o payload
    const { prompt } = await req.json();
    if (!prompt || typeof prompt !== "string") {
      return new Response(JSON.stringify({
        error: "O campo 'prompt' é obrigatório e deve ser uma string"
      }), {
        status: 400,
        headers
      });
    }
    // Obter a chave da API
    const apiKey = Deno.env.get("OPENAI_API_KEY");
    if (!apiKey) {
      return new Response(JSON.stringify({
        error: "Chave da API não configurada"
      }), {
        status: 500,
        headers
      });
    }
    // Fazer requisição à API da OpenAI
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 100
      })
    });
    // Verificar resposta da API
    if (!response.ok) {
      const errorData = await response.json();
      return new Response(JSON.stringify({
        error: "Erro na API da OpenAI",
        details: errorData
      }), {
        status: response.status,
        headers
      });
    }
    const data = await response.json();
    return new Response(JSON.stringify(data), {
      status: 200,
      headers
    });
  } catch (error) {
    return new Response(JSON.stringify({
      error: "Erro interno no servidor",
      details: error.message
    }), {
      status: 500,
      headers
    });
  }
});
